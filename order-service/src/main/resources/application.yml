eureka:
  port: 8761
  address: localhost
db:
  port: 3310
  host: localhost
  name: orderDatabase
---
spring:
  profiles: docker
eureka:
  port: 8761
  address: eureka-server
db:
  port: 3310
  host: order-database
  name: orderDatabase
---

server:
  port: 8081
  adress: localhost
#
#Spring
#
spring:
  application:
    name: ORDER-SERVICE
  datasource:
    url: jdbc:mysql://${db.host}:${db.port}/${db.name}?useUnicode=true&serverTimezone=UTC
    driver: com.mysql.Driver
    username: root
    password: root
    #initialization-mode: always
  jpa:
    hibernate:
      ddl-auto: update
      show-sql: true
      cache:
        use_query_cache: false
        use_second_level_cache: false
    properties:
      hibernate:
        connection:
          charSet: UTF-8
        hbm2ddl:
          import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        dialect: org.hibernate.dialect.MySQLDialect
  http:
    multipart:
      max-file-size: 1500KB
      max-request-size: 1500KB
  main:
    allow-bean-definition-overriding: true


#
#EUREKA SETTINGS
#
eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    service-url:
      defaultZone: http://${eureka.address}:${eureka.port}/eureka
  server:
    waitTimeInMsWhenSyncEmpty: 0
  healthcheck:
    enabled: true
  instance:
    prefer-ip-address: true
    lease-expiration-duration-in-seconds: 15
    lease-renewal-interval-in-seconds: 5
    ip-address: ${server.address}
    instance-id: ${server.address}:${server.port}
#
#FEING
#
feign:
  hystrix:
    enabled: true

product-service:
  name: PRODUCT-SERVICE
#product-availabillity-service:
#  name: PRODUCT-AVAILABILLITY-SEVICE
cart-service:
  name: CART-SERVICE
#
#Ribbon planning to make server load balancer to cart, product services
#
#Some setting here

#
#Hystrix
#
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: 10000
      #After 3 failed request we turn on a default realisation,
      #after 1 min we will try again sent request to service
      circuitBreaker:
        enabled: true
        requestVolumeThreshold: 3
        sleepWindowInMilliseconds: 60000
      fallback:
        enable: true
        isolation:
          semaphore:
            maxConcurrentRequests: 3
