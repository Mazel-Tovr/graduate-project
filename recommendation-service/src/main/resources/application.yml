eureka:
  port: 8761
  address: localhost
db1:
  port: 3305
  host: localhost
  name: productDatabase
db2:
  port: 3311
  host: localhost
  name: recommendationDatabase
---
spring:
  profiles: docker
eureka:
  port: 8761
  address: eureka-server
db1:
  port: 3305
  host: product-database
  name: productDatabase
db2:
  port: 3311
  host: recommendation-database
  name: recommendationDatabase
---

server:
  port: 7777
  address: localhost
#
#Spring
#
spring:
  application:
    name: RECOMMENDATION-SERVICE
  productdb:
    datasource:
      url: jdbc:mysql://${db1.host}:${db1.port}/${db1.name}?useUnicode=true&serverTimezone=UTC
      driver: com.mysql.Driver
      username: root
      password: root
  recomendationdb:
    datasource:
      url: jdbc:mysql://${db2.host}:${db2.port}/${db2.name}?useUnicode=true&serverTimezone=UTC
      driver: com.mysql.Driver
      username: root
      password: root
      # initialization-mode: always
  jpa:
    hibernate:
      hbm2ddl:
        auto: update
      show-sql: true
      cache:
        use_query_cache: false
        use_second_level_cache: false
    properties:
      hibernate:
        connection:
          charSet: UTF-8
        hbm2ddl:
          import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        dialect: org.hibernate.dialect.MySQL57Dialect
  http:
    multipart:
      max-file-size: 1500KB
      max-request-size: 1500KB
  main:
    allow-bean-definition-overriding: true

#
#EUREKA SETTINGS
#
eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    service-url:
      defaultZone: http://${eureka.address}:${eureka.port}/eureka
  server:
    waitTimeInMsWhenSyncEmpty: 0
  healthcheck:
    enabled: true
  instance:
    prefer-ip-address: true
    lease-expiration-duration-in-seconds: 15
    lease-renewal-interval-in-seconds: 5
    ip-address: ${server.address}
    instance-id: ${server.address}:${server.port}
#
#FEING
#
feign:
  hystrix:
    enabled: true

#product-availabillity-service:
#  name: PRODUCT-AVAILABILLITY-SERVICE
authorization-service:
  name: AUTHORIZATION-SERVICE

#
#Ribbon planning to make server load balancer to cart, product services
#
#Some setting here

#
#Hystrix
#
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: 10000
      #After 3 failed request we turn on a default realisation,
      #after 1 min we will try again sent request to service
      circuitBreaker:
        enabled: true
        requestVolumeThreshold: 3
        sleepWindowInMilliseconds: 60000
      fallback:
        enable: true
        isolation:
          semaphore:
            maxConcurrentRequests: 3


api:
  rout: /api
  recommendation-service:
    rout: ${api.rout}/recommendations
    current-user:
      rout: ${api.recommendation-service.rout}/{userName}
      certain-count:
        rout: ${api.recommendation-service.current-user.rout}/{count}
    visit:
      rout: ${api.recommendation-service.rout}/visit

jwt:
  header: Authorization
  # 60 * 60 * 24 = 86400
  expires_in: 86400
  secret: sgd34bwfAbfSBPpe0r8gwbg
  cookie: AUTH-TOKEN
